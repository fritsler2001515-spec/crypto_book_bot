from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton

from domain.use_cases.portfolio_use_cases import GetUserPortfolioUseCase, AddCoinToPortfolioUseCase
from infrastructure.database.repositories import (
    SQLAlchemyUserRepository,
    SQLAlchemyPortfolioRepository,
    SQLAlchemyTransactionRepository
)
from infrastructure.external_apis.coin_gecko_api import CoinGeckoAPI
from shared.config import settings

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PortfolioStates(StatesGroup):
    waiting_for_symbol = State()
    waiting_for_name = State()
    waiting_for_quantity = State()
    waiting_for_price = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    
    # URL –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
    webapp_url = "https://crypto-book-bot.vercel.app"
    
    keyboard = [
        [KeyboardButton(text="üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å"), KeyboardButton(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É")],
        [KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")],
        [KeyboardButton(text="üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url))],
        [KeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Bot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("webapp"))
async def cmd_webapp(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # URL –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
    webapp_url = "https://crypto-book-bot.vercel.app"
    
    await message.answer(
        f"üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n"
        f"üîó {webapp_url}\n\n"
        f"üì± –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º.\n\n"
        f"üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' –≤ –º–µ–Ω—é –±–æ—Ç–∞."
    )

@router.message(Command("app"))
async def cmd_app(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    import requests
    
    # –ü–æ–ª—É—á–∞–µ–º ngrok URL
    # URL –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
    current_url = "https://crypto-book-bot.vercel.app"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Web App –∫–Ω–æ–ø–∫–æ–π
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=current_url)
        )]
    ])
    
    await message.answer(
        f"üöÄ –í–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n"
        f"üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        f"üíº –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –ø—Ä—è–º–æ –≤ Telegram!",
        reply_markup=keyboard
    )

@router.message(Command("url"))
async def cmd_url(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    import requests
    
    # –ü–æ–ª—É—á–∞–µ–º ngrok URL
    # URL –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
    current_url = "https://crypto-book-bot.vercel.app"
    await message.answer(
        f"üîó –¢–µ–∫—É—â–∏–π URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n"
        f"üåê {current_url}\n\n"
        f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."
    )

@router.message(F.text == "üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def show_webapp_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    await message.answer(
        "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' –≤—ã—à–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º.\n\n"
        "–í –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–∫–∏"
    )

@router.message(F.text == "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å")
async def show_portfolio(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ use case
        from infrastructure.database.connection import get_async_session
        
        async for session in get_async_session():
            user_repo = SQLAlchemyUserRepository(session)
            portfolio_repo = SQLAlchemyPortfolioRepository(session)
            
            use_case = GetUserPortfolioUseCase(user_repo, portfolio_repo)
            portfolio = await use_case.execute(message.from_user.id)
            
            if not portfolio:
                await message.answer("üì≠ –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É!")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
            portfolio_text = "üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
            total_value = 0
            
            for item in portfolio:
                portfolio_text += f"ü™ô {item.name} ({item.symbol})\n"
                portfolio_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.total_quantity}\n"
                portfolio_text += f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${item.avg_price:.4f}\n"
                portfolio_text += f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${item.total_spent:.2f}\n\n"
                total_value += item.total_spent
            
            portfolio_text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_value:.2f}"
            
            await message.answer(portfolio_text)
            break
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}")

@router.message(F.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É")
async def start_add_coin(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
    await state.set_state(PortfolioStates.waiting_for_symbol)
    await message.answer(
        "ü™ô –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH, ADA):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(PortfolioStates.waiting_for_symbol)
async def process_symbol(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞ –º–æ–Ω–µ—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_main_keyboard())
        return
    
    await state.update_data(symbol=message.text.upper())
    await state.set_state(PortfolioStates.waiting_for_name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã:")

@router.message(PortfolioStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã"""
    await state.update_data(name=message.text)
    await state.set_state(PortfolioStates.waiting_for_quantity)
    await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:")

@router.message(PortfolioStates.waiting_for_quantity)
async def process_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç"""
    try:
        quantity = float(message.text)
        await state.update_data(quantity=quantity)
        await state.set_state(PortfolioStates.waiting_for_price)
        await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (–≤ USD):")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

@router.message(PortfolioStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏"""
    try:
        price = float(message.text)
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        from infrastructure.database.connection import get_async_session
        
        async for session in get_async_session():
            user_repo = SQLAlchemyUserRepository(session)
            portfolio_repo = SQLAlchemyPortfolioRepository(session)
            transaction_repo = SQLAlchemyTransactionRepository(session)
            
            use_case = AddCoinToPortfolioUseCase(user_repo, portfolio_repo, transaction_repo)
            
            success = await use_case.execute(
                telegram_id=message.from_user.id,
                symbol=data['symbol'],
                name=data['name'],
                quantity=data['quantity'],
                price=price
            )
            
            if success:
                await message.answer(
                    f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {data['symbol']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å!",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã",
                    reply_markup=get_main_keyboard()
                )
            
            await state.clear()
            break
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())
        await state.clear()

@router.message(F.text == "üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def show_transactions(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from infrastructure.database.connection import get_async_session
        
        async for session in get_async_session():
            user_repo = SQLAlchemyUserRepository(session)
            transaction_repo = SQLAlchemyTransactionRepository(session)
            
            user = await user_repo.get_by_telegram_id(message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            transactions = await transaction_repo.get_user_transactions(user.id)
            
            if not transactions:
                await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                return
            
            transactions_text = "üìã –í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
            
            for tx in transactions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                transactions_text += f"ü™ô {tx.symbol} ({tx.name})\n"
                transactions_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {tx.quantity}\n"
                transactions_text += f"   –¶–µ–Ω–∞: ${tx.price:.4f}\n"
                transactions_text += f"   –°—É–º–º–∞: ${tx.total_spent:.2f}\n"
                transactions_text += f"   –î–∞—Ç–∞: {tx.timestamp.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await message.answer(transactions_text)
            break
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {str(e)}")

@router.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    await message.answer(
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n\n"
        "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
        "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ."
    )

@router.message(F.text == "üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def get_app_link(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º ngrok URL
    # URL –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
    current_url = "https://crypto-book-bot.vercel.app"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Web App –∫–Ω–æ–ø–∫–æ–π
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=current_url)
        )]
    ])
    
    await message.answer(
        f"üöÄ –í–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n"
        f"üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        f"üíº –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –ø—Ä—è–º–æ –≤ Telegram!",
        reply_markup=keyboard
    )

@router.message()
async def echo_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    ) 